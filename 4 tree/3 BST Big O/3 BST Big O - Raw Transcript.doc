Okay.

So now let's look at binary search tree.

Big O.

So I'm going to bring up a note here and we're going to do some math.

It's very simple math here.

You could say that this is one node or.

This is also two to the one minus one node, so two to the one is two minus one.

Equals one, and you'll see why I'm doing this here in a second.

Because when we build this out to another level, this is two to the two nodes minus one.

So four minus one is three.

We have three nodes there.

This is two to the three.

This is two to the four.

Now you can see as this grows and it becomes two to the ten two to the 20.

The minus one is irrelevant.

So I'm just going to remove this and we'll say this is approximately two to the four nodes and two to

the three and two to the two and two to the one.

So if we're going to find something in this tree with just one node, it would take one step.

If we're going to find something in this tree, let's say we're going to find the number 76.

It would take one two steps.

If we're going to find the number 27, it is one, two, three steps.

And let's say the number 49, it's one, two, three, four steps and so on.

So that's to find the item.

If you're going to remove the item you would have to iterate through the tree, get to that item and

remove it.

It would also take four steps.

If you were going to add something below the number 49, you would iterate through four steps and add

an item.

It doesn't matter if you are finding removing, inserting.

This is all going to be four steps.

So you could call this o of log n.

So this is our best possible scenario.

And that's not an O.

But I'm just going to put this out here and say roughly speaking it is O of log n.

And remember O of log n is very efficient.

And the firm that we used with O of log in was Divide and Conquer.

So I'm going to show you the divide and conquer aspect of a tree.

If we're going to find that number 49, and we start at the number 47 and move to the right, because

it's more than 47 to the 76, everything that's to the left of the 76, we're not going to have to look

at.

We're not going to have to iterate through.

We can completely ignore it like.

This.

We have cut the tree in half, and when we move down one level again, we are doing that again.

Until we finally get to the item that we're looking for.

So the vast majority of the items in the tree we didn't even have to look at.

And that's what makes it so efficient.

We'll bring our tree back here.

And like I said, this was our best possible scenario, which would be Omega.

We're more likely to see something like this.

This would be theta, but we could still say that this operates like a log in.

But this is not our worst possible scenario.

Our worst possible scenario.

Goes like this.

Let's say we have a node and the next one is larger than that one, and the next one is larger than

that one, and the next one is larger than that one.

And it just never forks.

So you never get that advantage of dividing conquer.

When you go to find something, it's just operating in a straight line.

And we've seen a data structure that looks like this.

It's a linked list.

And if you were going to find that 91 node in a linked list, you would have to iterate through the

entire list that is O of N.

Well, if you have a binary search tree that looks like this and you're going to find the 91 node,

you have to iterate one, two three, four.

Through the list to get to that node.

There are four items and it took you four steps.

That is O of N.

And since big O is a measure of your worst possible scenario, technically the big O of a binary search

tree is O of N.

Our best possible scenario is O of log n, and since we're probably going to be somewhere in the middle,

we treat this as if it is an O of log n data structure.

So for lookup insert remove.

This is effectively.

O of log n.

Now let's compare these three to a linked list.

First, we'll start with lookup.

If you're going to look for the number 91 in this linked list, you would have to iterate through the

linked list that is O of n.

And this is going to be closer to a login with a binary search tree.

So the advantage goes to the binary search tree.

What about if we're going to remove.

Same thing.

If we were going to remove the node with the value of 91, we're going to have to iterate through the

linked list.

Like that.

And that's O of n.

Binary search tree is going to be log n.

But what about if we're going to insert an item?

See there's no advantage with a linked list of keeping the list in order, because you're still going

to have to iterate through the list when you go look for something.

So you may as well just put it on the end.

And this is an O of one.

So this advantage goes to the linked list.

So let's just look at all of these.

Like this insert is better for a linked list because it's o of one to put something on the end.

But lookup is going to be better for a binary search tree as well as remove.

You're giving up some efficiencies, putting the items into the tree to make it faster to look up items

later.

And the same goes for an array, because an array it's o of one to add something.

But if you're going to look up by value, that is going to be O of N, just like a linked list.

Okay.

So that is our overview of binary search tree.

Big O.